[gd_scene load_steps=13 format=2]

[ext_resource path="res://Rooms/Room.tscn" type="PackedScene" id=1]
[ext_resource path="res://icon.png" type="Texture2D" id=3]
[ext_resource path="res://Weapons/WarHammer.tscn" type="PackedScene" id=4]
[ext_resource path="res://Characters/Breakables/Breakable.tscn" type="PackedScene" id=5]
[ext_resource path="res://Rooms/Furniture and Traps/LateralDoor.tscn" type="PackedScene" id=6]
[ext_resource path="res://Rooms/Furniture and Traps/Stairs.tscn" type="PackedScene" id=7]
[ext_resource path="res://Characters/Breakables/Torch/CleanLight.tscn" type="PackedScene" id=8]
[ext_resource path="res://Characters/Breakables/Torch/BreakableTorch.tscn" type="PackedScene" id=9]

[sub_resource type="GDScript" id=2]

[sub_resource type="Shader" id=5]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -1.5;
uniform float position = 1;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 2.0;
uniform float ray1_density = 4.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : source_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"
script = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 5 )
shader_param/angle = -1.0
shader_param/position = 1.0
shader_param/spread = 0.091
shader_param/cutoff = 0.161
shader_param/falloff = 0.887
shader_param/edge_fade = 0.039
shader_param/speed = 10.0
shader_param/ray1_density = 4.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.704
shader_param/color = Color( 0.890196, 0.776471, 0.490196, 0.921569 )
shader_param/hdr = false
shader_param/seed = 7.0

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 32, 16 )

[node name="SpawnRoom0" instance=ExtResource( 1 )]

[node name="TileMap" parent="." index="0"]
tile_data = PackedInt32Array( 0, 7, 0, 1, 1, 0, 2, 1, 0, 3, 1, 0, 4, 1, 0, 5, 1, 0, 6, 1, 0, 7, 1, 0, 8, 9, 0, 9, 1, 0, 10, 1, 0, 11, 1, 0, 12, 1, 0, 13, 1, 0, 14, 8, 0, 65536, 6, 0, 65537, 2, 0, 65538, 2, 0, 65539, 2, 0, 65540, 2, 0, 65541, 2, 0, 65542, 2, 0, 65543, 2, 0, 65544, 2, 0, 65545, 2, 0, 65546, 2, 0, 65547, 2, 0, 65548, 2, 0, 65549, 2, 0, 65550, 5, 0, 131072, 6, 0, 131073, 14, 0, 131074, 14, 0, 131075, 14, 0, 131076, 14, 0, 131077, 14, 0, 131078, 14, 0, 131079, 14, 0, 131080, 14, 0, 131081, 14, 0, 131082, 14, 0, 131083, 14, 0, 131084, 14, 0, 131085, 14, 0, 131086, 5, 0, 196608, 6, 0, 196609, 14, 0, 196610, 14, 0, 196611, 15, 0, 196612, 14, 0, 196613, 14, 0, 196614, 14, 0, 196615, 14, 0, 196616, 14, 0, 196617, 14, 0, 196618, 14, 0, 196619, 14, 0, 196620, 14, 0, 196621, 14, 0, 196622, 5, 0, 262144, 6, 0, 262145, 14, 0, 262146, 14, 0, 262147, 14, 0, 262148, 14, 0, 262149, 14, 0, 262150, 14, 0, 262151, 14, 0, 262152, 14, 0, 262153, 14, 0, 262154, 14, 0, 262155, 14, 0, 262156, 14, 0, 262157, 14, 0, 262158, 5, 0, 327680, 6, 0, 327681, 14, 0, 327682, 14, 0, 327683, 14, 0, 327684, 14, 0, 327685, 14, 0, 327686, 14, 0, 327687, 14, 0, 327688, 14, 0, 327689, 14, 0, 327690, 14, 0, 327691, 15, 0, 327692, 14, 0, 327693, 14, 0, 327694, 3, 0, 393216, 7, 0, 393217, 14, 0, 393218, 18, 0, 393219, 14, 0, 393220, 14, 0, 393221, 14, 0, 393222, 14, 0, 393223, 14, 0, 393224, 14, 0, 393225, 14, 0, 393226, 14, 0, 393227, 15, 0, 393228, 5, 0, 458752, 6, 0, 458753, 18, 0, 458754, 23, 0, 458755, 18, 0, 458756, 14, 0, 458757, 14, 0, 458758, 14, 0, 458759, 15, 0, 458760, 14, 0, 458761, 14, 0, 458762, 14, 0, 458763, 14, 0, 458764, 5, 0, 524288, 6, 0, 524289, 22, 0, 524290, 23, 0, 524291, 22, 0, 524292, 20, 0, 524293, 14, 0, 524294, 14, 0, 524295, 14, 0, 524296, 14, 0, 524297, 14, 0, 524298, 14, 0, 524299, 14, 0, 524300, 5, 0, 589824, 4, 0, 589825, 23, 0, 589826, 22, 0, 589827, 22, 0, 589828, 20, 0, 589829, 14, 0, 589830, 14, 0, 589831, 14, 0, 589832, 14, 0, 589833, 14, 0, 589834, 14, 0, 589835, 14, 0, 589836, 3, 0 )

[node name="TileMap2" parent="." index="1"]
tile_data = PackedInt32Array( 327692, 11, 0, 327693, 10, 0, 589825, 10, 0, 589826, 10, 0, 589827, 10, 0, 589828, 10, 0, 589829, 10, 0, 589830, 10, 0, 589831, 10, 0, 589832, 10, 0, 589833, 10, 0, 589834, 10, 0, 589835, 10, 0 )

[node name="FurnitureTileMap" parent="." index="2"]
tile_data = PackedInt32Array( 65541, 33, 0, 65544, 33, 0, 65547, 32, 0, 65548, 32, 0, 65549, 32, 0, 131073, 35, 0, 524289, 31, 0, 589825, 31, 0, 589826, 31, 0, 589827, 31, 0 )

[node name="LateralDoor" parent="Doors" index="0" instance=ExtResource( 6 )]
position = Vector2( 240, 55 )

[node name="PlayerSpawnPos" type="Marker2D" parent="." index="7"]
position = Vector2( 112, 128 )

[node name="GodRay" type="Sprite2D" parent="." index="8"]
material = SubResource( 4 )
position = Vector2( 31, 117 )
scale = Vector2( 0.703125, 1 )
texture = ExtResource( 3 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerDetector" index="0"]
position = Vector2( 193, 58 )
shape = SubResource( 1 )

[node name="WarHammer" parent="." index="10" instance=ExtResource( 4 )]
position = Vector2( 168, 134 )
on_floor = true

[node name="Breakable" parent="." index="11" instance=ExtResource( 5 )]
position = Vector2( 138, 95 )

[node name="Breakable2" parent="." index="12" instance=ExtResource( 5 )]
position = Vector2( 83, 106 )

[node name="Stairs" parent="." index="14" instance=ExtResource( 7 )]
position = Vector2( 55, 55 )

[node name="BreakableTorch" parent="." index="15" instance=ExtResource( 9 )]
position = Vector2( 52, 29 )
scale = Vector2( 0.703125, 1 )

[node name="BreakableTorch2" parent="." index="16" instance=ExtResource( 9 )]
position = Vector2( 159, 27 )
scale = Vector2( 0.703125, 1 )

[node name="CleanLight" parent="." index="17" instance=ExtResource( 8 )]
position = Vector2( 20, 100 )
